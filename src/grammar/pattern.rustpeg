use matcher::trie::node::{CompiledPattern};
use matcher::trie::node::{Node, NodeType};
use parsers::{SetParser, IntParser, Parser, OptionalParameter, HasOptionalParameter, ParserFactory};
use grammar;

use std::str::FromStr;

#[pub]
pattern -> CompiledPattern
  = pattern_piece+
  / "" { Vec::new() }

pattern_piece -> NodeType
  = literal
  / parser

literal -> NodeType
  = (!PARSER_BEGIN .)+ {
      let unescaped_literal = grammar::unescape_literal(match_str);
      NodeType::Literal(unescaped_literal)
    }

parser -> NodeType
  = PARSER_BEGIN parser:parser_type ":" name:identifier PARSER_END {
    let mut parser = parser;
    parser.base_mut().set_name(name.to_string());
    NodeType::Parser(parser)
  }

parser_type -> Box<Parser>
  = parser_type_with_params
  / parser_type_without_params

parser_type_without_params -> Box<Parser>
  = parser_type:possible_parser_type_without_params {?
    let parser = ParserFactory::from_type(parser_type);
    parser.ok_or("Could not find a parser with this type")
  }

possible_parser_type_without_params -> &'input str
  = INT { match_str }

parser_type_with_params -> Box<Parser>
  = parser_SET_with_params
  / parser_INT_with_params

parser_SET_with_params -> Box<Parser>
  = SET PARSER_PARAMS_BEGIN s:string po:parser_SET_optional_params? PARSER_PARAMS_END {
    let mut parser = SetParser::new();
    parser.set_character_set(s);
    grammar::set_optional_params(&mut parser, po.as_ref());
    Box::new(parser)
  }

parser_SET_optional_params -> Vec<OptionalParameter<'input>>
  = comma params:parser_BASE_optional_param ** comma { params }

parser_BASE_optional_param -> OptionalParameter<'input>
  = name:MIN_LEN "=" value:int { OptionalParameter::Int(name, value) }
  / name:MAX_LEN "=" value:int { OptionalParameter::Int(name, value) }

parser_INT_with_params -> Box<Parser>
  = INT PARSER_PARAMS_BEGIN po:parser_INT_optional_params? PARSER_PARAMS_END {
    let mut parser = IntParser::new();
    grammar::set_optional_params(&mut parser, po.as_ref());
    Box::new(parser)
  }

parser_INT_optional_params -> Vec<OptionalParameter<'input>>
  = params:parser_BASE_optional_param ** comma { params }

MIN_LEN -> &'input str
  = "min_len" { match_str }

MAX_LEN -> &'input str
  = "max_len" { match_str }

INT -> &'input str
  = "INT" { match_str }

SET -> &'input str
  = "SET" { match_str }

PARSER_BEGIN = "%{"
PARSER_END = "}"
PARSER_PARAMS_BEGIN = "("
PARSER_PARAMS_END = ")"

identifier -> &'input str
  = [a-zA-Z_]([a-z-A-Z0-9_]![-])* { match_str }

string -> &'input str
  = '"' s:all_chars_until_quotation_mark '"' { s }

all_chars_until_quotation_mark -> &'input str
  = (!'"' .)+ { match_str }

comma = "," " "*

int -> usize
  = [0-9]+ { usize::from_str(match_str).ok().unwrap() }
